{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '../../database';\nimport randomWords from 'random-words';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  console.log();\n\n  const randomInt = (min, max) => {\n    return Math.round(min + Math.random() * (max - min));\n  };\n\n  const token = `${randomWords()}-${randomWords()}-${randomInt(100, 999)}`;\n  const firstPlayer = req.query.firstPlayer || Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: randomWords(),\n        team: 0,\n        isRevealed: false\n      });\n    }\n\n    boardMap.push(row);\n  }\n\n  const addCardOwner = int => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n\n    boardMap[x][y].team = int;\n  };\n\n  for (let i = 0; i < 9; i++) {\n    addCardOwner(firstPlayer === 1 ? 1 : 2);\n\n    if (i !== 0) {\n      addCardOwner(firstPlayer === 1 ? 2 : 1);\n    }\n  }\n\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    players: {\n      blue: [],\n      red: []\n    }\n  };\n\n  try {\n    const result = await req.db.collection('games').insertOne(game);\n    console.log(`New game created with the following id: ${result.insertedId} `);\n  } catch (err) {\n    throw new Error(`Error adding new game: ${err}`);\n  }\n\n  res.json(token);\n});\nexport default handler;","map":{"version":3,"sources":["/Users/jakedouglas 1/development/nextJs/cn/pages/api/newGame.js"],"names":["nextConnect","middleware","randomWords","handler","use","get","req","res","console","log","randomInt","min","max","Math","round","random","token","firstPlayer","query","boardMap","i","row","j","push","word","team","isRevealed","addCardOwner","int","x","y","game","players","blue","red","result","db","collection","insertOne","insertedId","err","Error","json"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport middleware from '../../database';\nimport randomWords from 'random-words';\n\nconst handler = nextConnect();\n\nhandler.use(middleware);\n\nhandler.get(async (req, res) => {\n  console.log();\n  const randomInt = (min, max) => {\n    return Math.round(min + (Math.random() * (max - min)));\n  };\n  const token = `${randomWords()}-${randomWords()}-${randomInt(100, 999)}`;\n  const firstPlayer = req.query.firstPlayer || Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n    for (let j = 0; j < 5; j++) {\n      row.push({ word: randomWords(), team: 0, isRevealed: false });\n    }\n    boardMap.push(row);\n  }\n  const addCardOwner = (int) => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n    boardMap[x][y].team = int;\n  }\n  for (let i = 0; i < 9; i++) {\n    addCardOwner(firstPlayer === 1 ? 1 : 2);\n    if (i !== 0) {\n      addCardOwner(firstPlayer === 1 ? 2 : 1);\n    }\n  }\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    players: {\n      blue: [],\n      red: [],\n    },\n  };\n  try {\n    const result = await req.db.collection('games').insertOne(game);\n    console.log(`New game created with the following id: ${result.insertedId} `);\n  } catch (err) {\n    throw new Error(`Error adding new game: ${err}`)\n  }\n  res.json(token)\n});\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}