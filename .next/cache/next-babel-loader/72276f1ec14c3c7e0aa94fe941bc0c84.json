{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nextConnect from 'next-connect';\nimport randomWords from 'random-words';\nimport middleware from '../../database';\nimport words from '../../words.json';\nimport undercoverWords from '../../undercoverWords.json';\nconst handler = nextConnect();\nhandler.use(middleware); // Find a game with token\n\nhandler.get(async (req, res) => {\n  const {\n    token\n  } = req.query;\n\n  try {\n    const game = await req.db.collection('games').findOne({\n      token\n    });\n\n    if (game) {\n      res.status(200).json(game);\n    } else {\n      res.status(400).send();\n    }\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n}); // Create new game\n\nhandler.post(async (req, res) => {\n  const {\n    token,\n    version,\n    wordsListLastGame\n  } = req.body;\n\n  const randomInt = (min, max) => Math.round(min + Math.random() * (max - min));\n\n  const wordsList = _objectSpread({}, wordsListLastGame) || {};\n\n  const getWord = () => {\n    const findNewWord = () => {\n      let word;\n\n      switch (version) {\n        case 'randomWords':\n          word = randomWords();\n          break;\n\n        case 'undercover':\n          word = undercoverWords.list[randomInt(0, undercoverWords.list.length - 1)];\n          break;\n\n        default:\n          word = words.list[randomInt(0, words.list.length - 1)];\n        //classic\n      }\n\n      return word;\n    };\n\n    let word = findNewWord();\n\n    while (wordsList[word]) {\n      word = findNewWord();\n    }\n\n    wordsList[word] = true;\n    return word;\n  };\n\n  const gameStatus = Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: getWord(),\n        team: 0,\n        isRevealed: false\n      });\n    }\n\n    boardMap.push(row);\n  }\n\n  const addCardOwner = int => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n\n    boardMap[x][y].team = int;\n  };\n\n  for (let i = 0; i < 9; i++) {\n    addCardOwner(gameStatus === 1 ? 1 : 2);\n\n    if (i !== 0) {\n      addCardOwner(gameStatus === 1 ? 2 : 1);\n    }\n  }\n\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    wordsList,\n    version,\n    scoreBoard: {\n      blue: gameStatus === 1 ? 9 : 8,\n      red: gameStatus === 2 ? 9 : 8,\n      gameStatus: gameStatus === 1 ? 1 : 2\n    },\n    players: {\n      blue: [],\n      red: []\n    }\n  };\n\n  try {\n    await req.db.collection('games').insertOne(game);\n    res.json(token);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error adding new game: ${err}`);\n  }\n}); // Update game\n\nhandler.put(async (req, res) => {\n  const {\n    x,\n    y,\n    token\n  } = req.body;\n\n  try {\n    const {\n      boardMap,\n      scoreBoard\n    } = await req.db.collection('games').findOne({\n      token\n    });\n    boardMap[x][y].isRevealed = true;\n    const {\n      team\n    } = boardMap[x][y];\n    const {\n      gameStatus\n    } = scoreBoard;\n\n    if (gameStatus < 3) {\n      if (team === 3) {\n        scoreBoard.gameStatus = gameStatus === 1 ? 4 : 3;\n      } else {\n        if (team !== gameStatus) {\n          scoreBoard.gameStatus = gameStatus === 1 ? 2 : 1;\n        }\n\n        if (team === 1) {\n          scoreBoard.red -= 1;\n\n          if (scoreBoard.red === 0) {\n            scoreBoard.gameStatus = 3;\n          }\n        }\n\n        if (team === 2) {\n          scoreBoard.blue -= 1;\n\n          if (scoreBoard.blue === 0) {\n            scoreBoard.gameStatus = 4;\n          }\n        }\n      }\n    }\n\n    if (gameStatus === 5) {\n      if (team === 3) {\n        scoreBoard.gameStatus = 7;\n      }\n\n      if (team === 4) {\n        scoreBoard.green -= 1;\n\n        if (scoreBoard.green === 0) {\n          scoreBoard.gameStatus = 6;\n        }\n      }\n    }\n\n    await req.db.collection('games').findOneAndUpdate({\n      token\n    }, {\n      $set: {\n        boardMap,\n        scoreBoard\n      }\n    }, {\n      returnOriginal: false\n    });\n    res.send(200);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error on guess: ${err}`);\n  }\n});\nexport default handler;","map":{"version":3,"sources":["/Users/jakedouglas 1/development/nextJs/cn/pages/api/games.js"],"names":["nextConnect","randomWords","middleware","words","undercoverWords","handler","use","get","req","res","token","query","game","db","collection","findOne","status","json","send","err","Error","post","version","wordsListLastGame","body","randomInt","min","max","Math","round","random","wordsList","getWord","findNewWord","word","list","length","gameStatus","boardMap","i","row","j","push","team","isRevealed","addCardOwner","int","x","y","scoreBoard","blue","red","players","insertOne","put","green","findOneAndUpdate","$set","returnOriginal"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport randomWords from 'random-words';\nimport middleware from '../../database';\nimport words from '../../words.json';\nimport undercoverWords from '../../undercoverWords.json';\n\nconst handler = nextConnect();\n\nhandler.use(middleware);\n\n// Find a game with token\nhandler.get(async (req, res) => {\n  const { token } = req.query;\n  try {\n    const game = await req.db.collection('games').findOne({ token });\n    if (game) {\n      res.status(200).json(game);\n    } else {\n      res.status(400).send();\n    }\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n});\n\n// Create new game\nhandler.post(async (req, res) => {\n  const { token, version, wordsListLastGame } = req.body;\n  const randomInt = (min, max) => Math.round(min + (Math.random() * (max - min)));\n\n  const wordsList = { ...wordsListLastGame } || {};\n  const getWord = () => {\n    const findNewWord = () => {\n      let word;\n      switch (version) {\n        case 'randomWords':\n          word = randomWords();\n          break;\n        case 'undercover':\n          word = undercoverWords.list[randomInt(0, undercoverWords.list.length - 1)];\n          break;\n        default:\n          word = words.list[randomInt(0, words.list.length - 1)]; //classic\n      }\n      return word;\n    };\n    let word = findNewWord();\n    while (wordsList[word]) {\n      word = findNewWord();\n    }\n    wordsList[word] = true;\n    return word;\n  };\n\n  const gameStatus = Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: getWord(),\n        team: 0,\n        isRevealed: false,\n      });\n    }\n    boardMap.push(row);\n  }\n\n  const addCardOwner = (int) => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n    boardMap[x][y].team = int;\n  };\n\n  for (let i = 0; i < 9; i++) {\n    addCardOwner(gameStatus === 1 ? 1 : 2);\n    if (i !== 0) {\n      addCardOwner(gameStatus === 1 ? 2 : 1);\n    }\n  }\n\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    wordsList,\n    version,\n    scoreBoard: {\n      blue: gameStatus === 1 ? 9 : 8,\n      red: gameStatus === 2 ? 9 : 8,\n      gameStatus: gameStatus === 1 ? 1 : 2,\n    },\n    players: {\n      blue: [],\n      red: [],\n    },\n  };\n  try {\n    await req.db.collection('games').insertOne(game);\n    res.json(token);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error adding new game: ${err}`);\n  }\n});\n\n// Update game\nhandler.put(async (req, res) => {\n  const { x, y, token } = req.body;\n  try {\n    const { boardMap, scoreBoard } = await req.db.collection('games').findOne({ token });\n    boardMap[x][y].isRevealed = true;\n    const { team } = boardMap[x][y];\n    const { gameStatus } = scoreBoard;\n\n    if (gameStatus < 3) {\n      if (team === 3) {\n        scoreBoard.gameStatus = gameStatus === 1 ? 4 : 3;\n      } else {\n        if (team !== gameStatus) {\n          scoreBoard.gameStatus = gameStatus === 1 ? 2 : 1;\n        }\n        if (team === 1) {\n          scoreBoard.red -= 1;\n          if (scoreBoard.red === 0) {\n            scoreBoard.gameStatus = 3;\n          }\n        }\n        if (team === 2) {\n          scoreBoard.blue -= 1;\n          if (scoreBoard.blue === 0) {\n            scoreBoard.gameStatus = 4;\n          }\n        }\n      }\n    }\n\n    if (gameStatus === 5) {\n      if (team === 3) {\n        scoreBoard.gameStatus = 7;\n      }\n      if (team === 4) {\n        scoreBoard.green -= 1;\n        if (scoreBoard.green === 0) {\n          scoreBoard.gameStatus = 6;\n        }\n      }\n    }\n    await req.db.collection('games').findOneAndUpdate({ token }, { $set: { boardMap, scoreBoard } }, { returnOriginal: false });\n    res.send(200);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error on guess: ${err}`);\n  }\n});\n\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}