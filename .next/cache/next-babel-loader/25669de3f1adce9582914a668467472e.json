{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '../../database';\nimport randomWords from 'random-words';\nimport words from '../../words.json';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  const {\n    token\n  } = req.query;\n\n  try {\n    const game = await req.db.collection('games').findOne({\n      token\n    });\n    res.json(game);\n  } catch (err) {\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n});\nhandler.post(async (req, res) => {\n  const {\n    token,\n    officialWords\n  } = req.body;\n\n  const randomInt = (min, max) => {\n    return Math.round(min + Math.random() * (max - min));\n  };\n\n  const getWord = ({\n    doNotInclude = {},\n    isOfficial\n  }) => {\n    let word = words.list[randomInt(0, words.list.length - 1)];\n\n    while (doNotInclude[word]) {\n      word = words.list[randomInt(0, words.list.length - 1)];\n    }\n\n    doNotInclude[word] = true;\n    return word;\n  };\n\n  const firstPlayer = req.query.firstPlayer || Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: officialWords ? getWord({}) : randomWords(),\n        team: 0,\n        isRevealed: false\n      });\n    }\n\n    boardMap.push(row);\n  }\n\n  const addCardOwner = int => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n\n    boardMap[x][y].team = int;\n  };\n\n  for (let i = 0; i < 9; i++) {\n    addCardOwner(firstPlayer === 1 ? 1 : 2);\n\n    if (i !== 0) {\n      addCardOwner(firstPlayer === 1 ? 2 : 1);\n    }\n  }\n\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    players: {\n      blue: [],\n      red: []\n    }\n  };\n\n  try {\n    const result = await req.db.collection('games').insertOne(game);\n    console.log(`New game created with the following id: ${result.insertedId} `);\n    res.json(token);\n  } catch (err) {\n    throw new Error(`Error adding new game: ${err}`);\n  }\n});\nexport default handler;","map":{"version":3,"sources":["/Users/jakedouglas 1/development/nextJs/cn/pages/api/games.js"],"names":["nextConnect","middleware","randomWords","words","handler","use","get","req","res","token","query","game","db","collection","findOne","json","err","Error","post","officialWords","body","randomInt","min","max","Math","round","random","getWord","doNotInclude","isOfficial","word","list","length","firstPlayer","boardMap","i","row","j","push","team","isRevealed","addCardOwner","int","x","y","players","blue","red","result","insertOne","console","log","insertedId"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport middleware from '../../database';\nimport randomWords from 'random-words';\nimport words from '../../words.json';\n\nconst handler = nextConnect();\n\nhandler.use(middleware);\n\nhandler.get(async (req, res) => {\n  const { token } = req.query;\n  try {\n    const game = await req.db.collection('games').findOne({ token });\n    res.json(game);\n  } catch (err) {\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n});\n\nhandler.post(async (req, res) => {\n  const { token, officialWords } = req.body;\n\n  const randomInt = (min, max) => {\n    return Math.round(min + (Math.random() * (max - min)));\n  };\n\n  const getWord = ( {doNotInclude = {}, isOfficial}) => {\n    let word = words.list[randomInt(0, words.list.length - 1)];\n    while (doNotInclude[word]) {\n      word = words.list[randomInt(0, words.list.length - 1)];\n    }\n    doNotInclude[word] = true;\n    return word;\n  };\n\n  const firstPlayer = req.query.firstPlayer || Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: officialWords ? getWord({}, ) : randomWords(),\n        team: 0,\n        isRevealed: false,\n      });\n    }\n    boardMap.push(row);\n  }\n  const addCardOwner = (int) => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n    boardMap[x][y].team = int;\n  }\n  for (let i = 0; i < 9; i++) {\n    addCardOwner(firstPlayer === 1 ? 1 : 2);\n    if (i !== 0) {\n      addCardOwner(firstPlayer === 1 ? 2 : 1);\n    }\n  }\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    players: {\n      blue: [],\n      red: [],\n    },\n  };\n  try {\n    const result = await req.db.collection('games').insertOne(game);\n    console.log(`New game created with the following id: ${result.insertedId} `);\n    res.json(token);\n  } catch (err) {\n    throw new Error(`Error adding new game: ${err}`)\n  }\n});\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}