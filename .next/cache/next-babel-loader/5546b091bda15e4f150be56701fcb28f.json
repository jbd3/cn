{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nextConnect from 'next-connect';\nimport middleware from '../../database';\nimport randomWords from 'random-words';\nimport words from '../../words.json';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  const {\n    token\n  } = req.query;\n\n  try {\n    const game = await req.db.collection('games').findOne({\n      token\n    });\n    res.json(game);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n});\nhandler.post(async (req, res) => {\n  const {\n    token,\n    officialWords\n  } = req.body;\n\n  const randomInt = (min, max) => {\n    return Math.round(min + Math.random() * (max - min));\n  };\n\n  const getWord = ({\n    doNotInclude = {},\n    isOfficial\n  }) => {\n    const doNotIncludeList = _objectSpread({}, doNotInclude);\n\n    let word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n\n    while (doNotIncludeList[word]) {\n      word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    }\n\n    doNotIncludeList[word] = true;\n    return word;\n  };\n\n  const firstPlayer = req.query.firstPlayer || Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: officialWords ? getWord({\n          isOfficial: true\n        }) : getWord({\n          isOfficial: false\n        }),\n        team: 0,\n        isRevealed: false\n      });\n    }\n\n    boardMap.push(row);\n  }\n\n  const addCardOwner = int => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n\n    boardMap[x][y].team = int;\n  };\n\n  for (let i = 0; i < 9; i++) {\n    addCardOwner(firstPlayer === 1 ? 1 : 2);\n\n    if (i !== 0) {\n      addCardOwner(firstPlayer === 1 ? 2 : 1);\n    }\n  }\n\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    players: {\n      blue: [],\n      red: []\n    }\n  };\n  console.log('game: ', game);\n\n  try {\n    const result = await req.db.collection('games').insertOne(game);\n    res.json(token);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error adding new game: ${err}`);\n  }\n});\nhandler.put(async (req, res) => {\n  const {\n    x,\n    y,\n    token\n  } = req.body;\n\n  try {\n    const {\n      boardMap\n    } = await req.db.collection('games').findOne({\n      token\n    });\n    boardMap[x][y].isRevealed = true;\n    await req.db.collection('games').findOneAndUpdate({\n      token\n    }, {\n      $set: {\n        boardMap\n      }\n    }, {\n      returnOriginal: false\n    });\n    res.send(200);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error on guess: ${err}`);\n  }\n});\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}