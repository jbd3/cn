{"ast":null,"code":"import { MongoClient } from 'mongodb';\nimport nextConnect from 'next-connect';\nconst client = new MongoClient('mongodb+srv://barstool:T0qLffUuHsNiDFaX@cluster0-r3emj.mongodb.net/test?retryWrites=true&w=majority', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nasync function database(req, res, next) {\n  try {\n    if (!client.isConnected()) await client.connect();\n    req.dbClient = client;\n    req.db = client.db('cs');\n    console.log('Connected to Database');\n    return next();\n  } catch (err) {\n    throw new Error('Error connecting to Database. Error: ', err);\n  }\n}\n\nconst middleware = nextConnect();\nmiddleware.use(database);\nexport default middleware;","map":{"version":3,"sources":["/Users/jakedouglas 1/development/nextJs/cn/database.js"],"names":["MongoClient","nextConnect","client","useNewUrlParser","useUnifiedTopology","database","req","res","next","isConnected","connect","dbClient","db","console","log","err","Error","middleware","use"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,MAAMC,MAAM,GAAG,IAAIF,WAAJ,CAAgB,qGAAhB,EAAuH;AACpIG,EAAAA,eAAe,EAAE,IADmH;AAEpIC,EAAAA,kBAAkB,EAAE;AAFgH,CAAvH,CAAf;;AAKA,eAAeC,QAAf,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC,EAAwC;AACtC,MAAI;AACF,QAAI,CAACN,MAAM,CAACO,WAAP,EAAL,EAA2B,MAAMP,MAAM,CAACQ,OAAP,EAAN;AAC3BJ,IAAAA,GAAG,CAACK,QAAJ,GAAeT,MAAf;AACAI,IAAAA,GAAG,CAACM,EAAJ,GAASV,MAAM,CAACU,EAAP,CAAU,IAAV,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,WAAON,IAAI,EAAX;AACD,GAND,CAME,OAAOO,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAU,uCAAV,EAAmDD,GAAnD,CAAN;AACD;AACF;;AAED,MAAME,UAAU,GAAGhB,WAAW,EAA9B;AAEAgB,UAAU,CAACC,GAAX,CAAeb,QAAf;AAEA,eAAeY,UAAf","sourcesContent":["import { MongoClient } from 'mongodb';\nimport nextConnect from 'next-connect';\n\nconst client = new MongoClient('mongodb+srv://barstool:T0qLffUuHsNiDFaX@cluster0-r3emj.mongodb.net/test?retryWrites=true&w=majority', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nasync function database(req, res, next) {\n  try {\n    if (!client.isConnected()) await client.connect();\n    req.dbClient = client;\n    req.db = client.db('cs');\n    console.log('Connected to Database');\n    return next();\n  } catch (err) {\n    throw new Error('Error connecting to Database. Error: ', err);\n  }\n}\n\nconst middleware = nextConnect();\n\nmiddleware.use(database);\n\nexport default middleware;\n"]},"metadata":{},"sourceType":"module"}