{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport useSWR from 'swr';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport { useState } from 'react';\nimport Board from './Board';\nimport Toggle from '../components/Toggle';\nimport ScoreBoard from '../components/ScoreBoard';\n\nfunction fetcher(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n\nexport default function Index() {\n  var _boardMap;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var token = query.token;\n\n  var _useSWR = useSWR(\"/api/games?token=\".concat(token), fetcher, {\n    refreshInterval: 100\n  }),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  var boardMap = data === null || data === void 0 ? void 0 : data.boardMap;\n  var scoreBoard = data === null || data === void 0 ? void 0 : data.scoreBoard;\n  var loading = !boardMap;\n  if (error) boardMap = 'Failed to fetch game data.';\n\n  var _useState = useState(false),\n      isCodeMaster = _useState[0],\n      setIsCodeMaster = _useState[1];\n\n  var revealCard = function revealCard(x, y) {\n    if (boardMap[x][y].team !== scoreBoard.turn) {\n      scoreBoard.turn = scoreBoard.turn === 1 ? 2 : 1;\n    }\n\n    if (boardMap[x][y].team === 3) {\n      scoreBoard.gameOver = true;\n    }\n\n    fetch('/api/games', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        token: token,\n        x: x,\n        y: y\n      })\n    });\n  };\n\n  var copyToClipboard = function copyToClipboard() {\n    var el = document.createElement('textarea');\n    el.value = document.location.href;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  };\n\n  var cardsRemaining = {\n    red: 0,\n    blue: 0\n  };\n\n  if ((_boardMap = boardMap) === null || _boardMap === void 0 ? void 0 : _boardMap.length) {\n    boardMap.forEach(function (row) {\n      row.forEach(function (card) {\n        if (card.team === 1 && !card.isRevealed) {\n          cardsRemaining.red++;\n        }\n\n        if (card.team === 2 && !card.isRevealed) {\n          cardsRemaining.blue++;\n        }\n      });\n    });\n  }\n\n  return __jsx(\"main\", null, __jsx(\"div\", {\n    className: \"game-title\"\n  }, \"CODENAMES\"), loading && \"Loading...\", boardMap && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"link-container\",\n    onClick: function onClick() {\n      return copyToClipboard();\n    }\n  }, __jsx(\"div\", {\n    className: \"mb-2 token-form\"\n  }, __jsx(\"div\", {\n    className: \"flex bg-gray-100 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n  }, __jsx(\"input\", {\n    className: \"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\",\n    type: \"text\",\n    value: \"\".concat(document.location.href),\n    disabled: true\n  }), __jsx(\"button\", {\n    className: \"btn-teal\",\n    type: \"button\"\n  }, \"Copy Link\")))), __jsx(\"div\", {\n    className: \"toggleContainer\"\n  }, __jsx(Toggle, {\n    text: \"Codemaster\",\n    onToggle: function onToggle() {\n      return setIsCodeMaster(!isCodeMaster);\n    },\n    checked: isCodeMaster\n  })), __jsx(ScoreBoard, {\n    scoreBoard: scoreBoard,\n    cardsRemaining: cardsRemaining\n  }), __jsx(Board, {\n    boardMap: boardMap,\n    isCodeMaster: isCodeMaster,\n    revealCard: revealCard\n  })), __jsx(\"style\", null, \"\\n        .game-title {\\n          font-family: futura;\\n          font-size: 45px;\\n          margin-top: 20px;\\n          align-self: center;\\n          color: white;\\n        }\\n        .scoreBoard {\\n          display: flex;\\n          align-content: space-between;\\n          align-self: center;\\n          border: 1px solid white;\\n          border-radius: 5px;\\n          padding: 10px;\\n          color: white;\\n          font-weight: 500;\\n        }\\n        .score {\\n          margin: 0 10px;\\n          color: white;\\n        }\\n        main {\\n          width: 100%;\\n          display: flex;\\n          flex-direction: column;\\n          justify-content: center;\\n        }\\n        .toggleContainer {\\n          width: 160px;\\n          align-self: center;\\n          margin: 20px 0;\\n        }\\n        .link-container {\\n          width: 98vw;\\n          max-width: 400px;\\n          align-self: center;\\n          font-size: 10px;\\n          margin: 20px 0;\\n        }\\n      \"));\n}","map":null,"metadata":{},"sourceType":"module"}