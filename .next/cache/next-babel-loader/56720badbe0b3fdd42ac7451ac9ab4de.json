{"ast":null,"code":"import nextConnect from 'next-connect';\nimport randomWords from 'random-words';\nimport middleware from '../../database';\nimport words from '../../words.json';\nconst handler = nextConnect();\nhandler.use(middleware); // Find a game with token\n\nhandler.get(async (req, res) => {\n  const {\n    token\n  } = req.query;\n\n  try {\n    const game = await req.db.collection('games').findOne({\n      token\n    });\n    res.json(game);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n}); // Create new game\n\nhandler.post(async (req, res) => {\n  const {\n    token,\n    officialWords\n  } = req.body;\n\n  const randomInt = (min, max) => Math.round(min + Math.random() * (max - min));\n\n  const doNotInclude = {};\n\n  const getWord = ({\n    isOfficial\n  }) => {\n    let word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n\n    while (doNotInclude[word]) {\n      word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    }\n\n    doNotInclude[word] = true;\n    return word;\n  };\n\n  const gameStatus = Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: officialWords ? getWord({\n          isOfficial: true\n        }) : getWord({\n          isOfficial: false\n        }),\n        team: 0,\n        isRevealed: false\n      });\n    }\n\n    boardMap.push(row);\n  }\n\n  const addCardOwner = int => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n\n    boardMap[x][y].team = int;\n  };\n\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    scoreBoard: {\n      blue: gameStatus === 1 ? 9 : 8,\n      red: gameStatus === 2 ? 9 : 8,\n      gameStatus: gameStatus === 1 ? 1 : 2\n    },\n    players: {\n      blue: [],\n      red: []\n    }\n  };\n\n  try {\n    await req.db.collection('games').insertOne(game);\n    res.json(token);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error adding new game: ${err}`);\n  }\n}); // Update game\n\nhandler.put(async (req, res) => {\n  const {\n    x,\n    y,\n    token\n  } = req.body;\n\n  try {\n    const {\n      boardMap,\n      scoreBoard\n    } = await req.db.collection('games').findOne({\n      token\n    });\n    boardMap[x][y].isRevealed = true;\n    const {\n      team\n    } = boardMap[x][y];\n    const {\n      gameStatus\n    } = scoreBoard;\n\n    if (gameStatus < 3) {\n      if (team === 3) {\n        scoreBoard.gameStatus = gameStatus === 1 ? 4 : 3;\n      } else {\n        if (team !== gameStatus) {\n          scoreBoard.gameStatus = gameStatus === 1 ? 2 : 1;\n        }\n\n        if (team === 1) {\n          scoreBoard.red -= 1;\n\n          if (scoreBoard.red === 0) {\n            scoreBoard.gameStatus = 3;\n          }\n        }\n\n        if (team === 2) {\n          scoreBoard.blue -= 1;\n\n          if (scoreBoard.blue === 0) {\n            scoreBoard.gameStatus = 4;\n          }\n        }\n      }\n    }\n\n    await req.db.collection('games').findOneAndUpdate({\n      token\n    }, {\n      $set: {\n        boardMap,\n        scoreBoard\n      }\n    }, {\n      returnOriginal: false\n    });\n    res.send(200);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error on guess: ${err}`);\n  }\n});\nexport default handler;","map":{"version":3,"sources":["/Users/jakedouglas 1/development/nextJs/cn/pages/api/games.js"],"names":["nextConnect","randomWords","middleware","words","handler","use","get","req","res","token","query","game","db","collection","findOne","json","err","status","send","Error","post","officialWords","body","randomInt","min","max","Math","round","random","doNotInclude","getWord","isOfficial","word","list","length","gameStatus","boardMap","i","row","j","push","team","isRevealed","addCardOwner","int","x","y","scoreBoard","blue","red","players","insertOne","put","findOneAndUpdate","$set","returnOriginal"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport randomWords from 'random-words';\nimport middleware from '../../database';\nimport words from '../../words.json';\n\nconst handler = nextConnect();\n\nhandler.use(middleware);\n\n// Find a game with token\nhandler.get(async (req, res) => {\n  const { token } = req.query;\n  try {\n    const game = await req.db.collection('games').findOne({ token });\n    res.json(game);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n});\n\n// Create new game\nhandler.post(async (req, res) => {\n  const { token, officialWords } = req.body;\n  const randomInt = (min, max) => Math.round(min + (Math.random() * (max - min)));\n\n  const doNotInclude = {};\n  const getWord = ({ isOfficial }) => {\n    let word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    while (doNotInclude[word]) {\n      word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    }\n    doNotInclude[word] = true;\n    return word;\n  };\n\n  const gameStatus = Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: officialWords ? getWord({ isOfficial: true }) : getWord({ isOfficial: false }),\n        team: 0,\n        isRevealed: false,\n      });\n    }\n    boardMap.push(row);\n  }\n  const addCardOwner = (int) => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n    boardMap[x][y].team = int;\n  };\n\n  \n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    scoreBoard: {\n      blue: gameStatus === 1 ? 9 : 8,\n      red: gameStatus === 2 ? 9 : 8,\n      gameStatus: gameStatus === 1 ? 1 : 2,\n    },\n    players: {\n      blue: [],\n      red: [],\n    },\n  };\n  try {\n    await req.db.collection('games').insertOne(game);\n    res.json(token);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error adding new game: ${err}`);\n  }\n});\n\n// Update game\nhandler.put(async (req, res) => {\n  const { x, y, token } = req.body;\n  try {\n    const { boardMap, scoreBoard } = await req.db.collection('games').findOne({ token });\n    boardMap[x][y].isRevealed = true;\n    const { team } = boardMap[x][y];\n    const { gameStatus } = scoreBoard;\n    if (gameStatus < 3) {\n      if (team === 3) {\n        scoreBoard.gameStatus = gameStatus === 1 ? 4 : 3;\n      } else {\n        if (team !== gameStatus) {\n          scoreBoard.gameStatus = gameStatus === 1 ? 2 : 1;\n        }\n        if (team === 1) {\n          scoreBoard.red -= 1;\n          if (scoreBoard.red === 0) {\n            scoreBoard.gameStatus = 3;\n          }\n        }\n        if (team === 2) {\n          scoreBoard.blue -= 1;\n          if (scoreBoard.blue === 0) {\n            scoreBoard.gameStatus = 4;\n          }\n        }\n      }\n    }\n    await req.db.collection('games').findOneAndUpdate({ token }, { $set: { boardMap, scoreBoard } }, { returnOriginal: false });\n    res.send(200);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error on guess: ${err}`);\n  }\n});\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}