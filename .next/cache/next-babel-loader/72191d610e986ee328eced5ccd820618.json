{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '../../database';\nimport randomWords from 'random-words';\nimport words from '../../words.json';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  const {\n    token\n  } = req.query;\n\n  try {\n    const game = await req.db.collection('games').findOne({\n      token\n    });\n    res.json(game);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n});\nhandler.post(async (req, res) => {\n  const {\n    token,\n    officialWords\n  } = req.body;\n\n  const randomInt = (min, max) => {\n    return Math.round(min + Math.random() * (max - min));\n  };\n\n  const doNotInclude = {};\n\n  const getWord = ({\n    isOfficial\n  }) => {\n    console.log(doNotInclude);\n    let word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n\n    while (doNotInclude[word]) {\n      word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    }\n\n    doNotInclude[word] = true;\n    return word;\n  };\n\n  const firstPlayer = req.query.firstPlayer || Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: officialWords ? getWord({\n          isOfficial: true\n        }) : getWord({\n          isOfficial: false\n        }),\n        team: 0,\n        isRevealed: false\n      });\n    }\n\n    boardMap.push(row);\n  }\n\n  const addCardOwner = int => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n\n    boardMap[x][y].team = int;\n  };\n\n  for (let i = 0; i < 9; i++) {\n    addCardOwner(firstPlayer === 1 ? 1 : 2);\n\n    if (i !== 0) {\n      addCardOwner(firstPlayer === 1 ? 2 : 1);\n    }\n  }\n\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    scoreBoard: {},\n    players: {\n      blue: [],\n      red: []\n    }\n  };\n  console.log('game: ', game);\n\n  try {\n    const result = await req.db.collection('games').insertOne(game);\n    res.json(token);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error adding new game: ${err}`);\n  }\n});\nhandler.put(async (req, res) => {\n  const {\n    x,\n    y,\n    token\n  } = req.body;\n\n  try {\n    const {\n      boardMap\n    } = await req.db.collection('games').findOne({\n      token\n    });\n    boardMap[x][y].isRevealed = true;\n    await req.db.collection('games').findOneAndUpdate({\n      token\n    }, {\n      $set: {\n        boardMap\n      }\n    }, {\n      returnOriginal: false\n    });\n    res.send(200);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error on guess: ${err}`);\n  }\n});\nexport default handler;","map":{"version":3,"sources":["/Users/jakedouglas 1/development/nextJs/cn/pages/api/games.js"],"names":["nextConnect","middleware","randomWords","words","handler","use","get","req","res","token","query","game","db","collection","findOne","json","err","status","send","Error","post","officialWords","body","randomInt","min","max","Math","round","random","doNotInclude","getWord","isOfficial","console","log","word","list","length","firstPlayer","boardMap","i","row","j","push","team","isRevealed","addCardOwner","int","x","y","scoreBoard","players","blue","red","result","insertOne","put","findOneAndUpdate","$set","returnOriginal"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport middleware from '../../database';\nimport randomWords from 'random-words';\nimport words from '../../words.json';\n\nconst handler = nextConnect();\n\nhandler.use(middleware);\n\nhandler.get(async (req, res) => {\n  const { token } = req.query;\n  try {\n    const game = await req.db.collection('games').findOne({ token });\n    res.json(game);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n});\n\nhandler.post(async (req, res) => {\n  const { token, officialWords } = req.body;\n\n  const randomInt = (min, max) => {\n    return Math.round(min + (Math.random() * (max - min)));\n  };\n\n  const doNotInclude = {};\n  const getWord = ({ isOfficial }) => {\n    console.log(doNotInclude);\n    let word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    while (doNotInclude[word]) {\n      word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    }\n    doNotInclude[word] = true;\n    return word;\n  };\n\n  const firstPlayer = req.query.firstPlayer || Math.random() >= 0.5 ? 1 : 2;\n  const boardMap = [];\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: officialWords ? getWord({ isOfficial: true }) : getWord({ isOfficial: false }),\n        team: 0,\n        isRevealed: false,\n      });\n    }\n    boardMap.push(row);\n  }\n  const addCardOwner = (int) => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n    boardMap[x][y].team = int;\n  }\n  for (let i = 0; i < 9; i++) {\n    addCardOwner(firstPlayer === 1 ? 1 : 2);\n    if (i !== 0) {\n      addCardOwner(firstPlayer === 1 ? 2 : 1);\n    }\n  }\n  addCardOwner(3);\n  const game = {\n    token,\n    boardMap,\n    scoreBoard: {\n      \n    },\n    players: {\n      blue: [],\n      red: [],\n    },\n  };\n  console.log('game: ', game);\n  try {\n    const result = await req.db.collection('games').insertOne(game);\n    res.json(token);\n  } catch (err) {\n    res.status(500).send()\n    throw new Error(`Error adding new game: ${err}`);\n  }\n});\n\nhandler.put(async (req, res) => {\n  const { x, y, token } = req.body;\n  try {\n    const { boardMap } = await req.db.collection('games').findOne({ token });\n    boardMap[x][y].isRevealed = true;\n    await req.db.collection('games').findOneAndUpdate({ token }, { $set: { boardMap } }, { returnOriginal: false });\n    res.send(200);\n  } catch (err) {\n    res.status(500).send()\n    throw new Error(`Error on guess: ${err}`);\n  }\n});\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}