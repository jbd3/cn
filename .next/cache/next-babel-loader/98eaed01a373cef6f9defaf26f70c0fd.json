{"ast":null,"code":"import nextConnect from 'next-connect';\nimport randomWords from 'random-words';\nimport middleware from '../../database';\nimport words from '../../words.json';\nimport gameStatusToString from '../../constants';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  const {\n    token\n  } = req.query;\n\n  try {\n    const game = await req.db.collection('games').findOne({\n      token\n    });\n    res.json(game);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n});\nhandler.post(async (req, res) => {\n  const {\n    token,\n    officialWords,\n    green\n  } = req.body;\n\n  const randomInt = (min, max) => Math.round(min + Math.random() * (max - min));\n\n  const doNotInclude = {};\n\n  const getWord = ({\n    isOfficial\n  }) => {\n    let word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n\n    while (doNotInclude[word]) {\n      word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    }\n\n    doNotInclude[word] = true;\n    return word;\n  };\n\n  let gameStatus = 5;\n  if (!green) gameStatus = req.query.firstPlayer || Math.random() >= 0.5 ? 1 : 2; // Fill the board with neutral cards\n\n  const boardMap = [];\n\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: officialWords ? getWord({\n          isOfficial: true\n        }) : getWord({\n          isOfficial: false\n        }),\n        team: 0,\n        isRevealed: false\n      });\n    }\n\n    boardMap.push(row);\n  }\n\n  const addCardOwner = int => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n\n    boardMap[x][y].team = int;\n  };\n\n  if (!green) {\n    for (let i = 0; i < 9; i++) {\n      addCardOwner(gameStatus === 1 ? 1 : 2);\n\n      if (i !== 0) {\n        addCardOwner(gameStatus === 1 ? 2 : 1);\n      }\n    }\n  }\n\n  if (green) {\n    for (let i = 0; i < 7; i++) {\n      addCardOwner(4);\n    }\n  }\n\n  addCardOwner(3);\n\n  if (green) {\n    addCardOwner(3);\n    addCardOwner(3);\n  }\n\n  const game = {\n    token,\n    boardMap,\n    scoreBoard: {\n      red: gameStatus === 2 ? 9 : 8,\n      blue: gameStatus === 1 ? 9 : 8,\n      gameStatus,\n      green\n    },\n    players: {\n      blue: [],\n      red: []\n    }\n  };\n\n  try {\n    await req.db.collection('games').insertOne(game);\n    res.json(token);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error adding new game: ${err}`);\n  }\n});\nhandler.put(async (req, res) => {\n  const {\n    x,\n    y,\n    token\n  } = req.body;\n\n  try {\n    const {\n      boardMap,\n      scoreBoard\n    } = await req.db.collection('games').findOne({\n      token\n    });\n    boardMap[x][y].isRevealed = true;\n    const {\n      team\n    } = boardMap[x][y];\n    const {\n      gameStatus\n    } = scoreBoard;\n\n    if (gameStatus < 3) {\n      if (team === 3) {\n        scoreBoard.gameStatus = gameStatus === 1 ? 4 : 3;\n      } else {\n        if (team !== gameStatus) {\n          scoreBoard.gameStatus = gameStatus === 1 ? 2 : 1;\n        }\n\n        if (team === 1) {\n          scoreBoard.red -= 1;\n\n          if (scoreBoard.red === 0) {\n            scoreBoard.gameStatus = 3;\n          }\n        }\n\n        if (team === 2) {\n          scoreBoard.blue -= 1;\n\n          if (scoreBoard.blue === 0) {\n            scoreBoard.gameStatus = 4;\n          }\n        }\n      }\n    }\n\n    if (gameStatus > 5) {\n      if (team === 3) {\n        scoreBoard.gameStatus = 7;\n      }\n    }\n\n    await req.db.collection('games').findOneAndUpdate({\n      token\n    }, {\n      $set: {\n        boardMap,\n        scoreBoard\n      }\n    }, {\n      returnOriginal: false\n    });\n    res.send(200);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error on guess: ${err}`);\n  }\n});\nexport default handler;","map":{"version":3,"sources":["/Users/jakedouglas 1/development/nextJs/cn/pages/api/games.js"],"names":["nextConnect","randomWords","middleware","words","gameStatusToString","handler","use","get","req","res","token","query","game","db","collection","findOne","json","err","status","send","Error","post","officialWords","green","body","randomInt","min","max","Math","round","random","doNotInclude","getWord","isOfficial","word","list","length","gameStatus","firstPlayer","boardMap","i","row","j","push","team","isRevealed","addCardOwner","int","x","y","scoreBoard","red","blue","players","insertOne","put","findOneAndUpdate","$set","returnOriginal"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\nimport randomWords from 'random-words';\nimport middleware from '../../database';\nimport words from '../../words.json';\nimport gameStatusToString from '../../constants';\n\nconst handler = nextConnect();\n\nhandler.use(middleware);\n\nhandler.get(async (req, res) => {\n  const { token } = req.query;\n  try {\n    const game = await req.db.collection('games').findOne({ token });\n    res.json(game);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error loadin game with token: ${token}: ${err}`);\n  }\n});\n\nhandler.post(async (req, res) => {\n  const { token, officialWords, green } = req.body;\n  const randomInt = (min, max) => Math.round(min + (Math.random() * (max - min)));\n\n  const doNotInclude = {};\n  const getWord = ({ isOfficial }) => {\n    let word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    while (doNotInclude[word]) {\n      word = isOfficial ? words.list[randomInt(0, words.list.length - 1)] : randomWords();\n    }\n    doNotInclude[word] = true;\n    return word;\n  };\n\n  let gameStatus = 5;\n  if (!green) gameStatus = req.query.firstPlayer || Math.random() >= 0.5 ? 1 : 2;\n  // Fill the board with neutral cards\n  const boardMap = [];\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        word: officialWords ? getWord({ isOfficial: true }) : getWord({ isOfficial: false }),\n        team: 0,\n        isRevealed: false,\n      });\n    }\n    boardMap.push(row);\n  }\n\n  const addCardOwner = (int) => {\n    let x = randomInt(0, 4);\n    let y = randomInt(0, 4);\n    while (boardMap[x][y].team !== 0) {\n      x = randomInt(0, 4);\n      y = randomInt(0, 4);\n    }\n    boardMap[x][y].team = int;\n  };\n\n  if (!green) {\n    for (let i = 0; i < 9; i++) {\n      addCardOwner(gameStatus === 1 ? 1 : 2);\n      if (i !== 0) {\n        addCardOwner(gameStatus === 1 ? 2 : 1);\n      }\n    }\n  }\n\n  if (green) {\n    for (let i = 0; i < 7; i++) {\n      addCardOwner(4);\n    }\n  }\n  addCardOwner(3);\n  if (green) {\n    addCardOwner(3);\n    addCardOwner(3);\n  }\n  const game = {\n    token,\n    boardMap,\n    scoreBoard: {\n      red: gameStatus === 2 ? 9 : 8,\n      blue: gameStatus === 1 ? 9 : 8,\n      gameStatus,\n      green,\n    },\n    players: {\n      blue: [],\n      red: [],\n    },\n  };\n  try {\n    await req.db.collection('games').insertOne(game);\n    res.json(token);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error adding new game: ${err}`);\n  }\n});\n\nhandler.put(async (req, res) => {\n  const { x, y, token } = req.body;\n  try {\n    const { boardMap, scoreBoard } = await req.db.collection('games').findOne({ token });\n    boardMap[x][y].isRevealed = true;\n    const { team } = boardMap[x][y];\n    const { gameStatus } = scoreBoard;\n\n    if (gameStatus < 3) {\n      if (team === 3) {\n        scoreBoard.gameStatus = gameStatus === 1 ? 4 : 3;\n      } else {\n        if (team !== gameStatus) {\n          scoreBoard.gameStatus = gameStatus === 1 ? 2 : 1;\n        }\n        if (team === 1) {\n          scoreBoard.red -= 1;\n          if (scoreBoard.red === 0) {\n            scoreBoard.gameStatus = 3;\n          }\n        }\n        if (team === 2) {\n          scoreBoard.blue -= 1;\n          if (scoreBoard.blue === 0) {\n            scoreBoard.gameStatus = 4;\n          }\n        }\n      }\n    }\n\n    if (gameStatus > 5) {\n      if (team === 3) {\n        scoreBoard.gameStatus = 7;\n      }\n    }\n\n    await req.db.collection('games').findOneAndUpdate({ token }, { $set: { boardMap, scoreBoard } }, { returnOriginal: false });\n    res.send(200);\n  } catch (err) {\n    res.status(500).send();\n    throw new Error(`Error on guess: ${err}`);\n  }\n});\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}